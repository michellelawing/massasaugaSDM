###--- Packages and data ------
library(dismo)
library(maptools)
library(maps)
library(raster)
library(rgdal)
library(rgeos)
library(mapdata)
library(rJava)
library(ggplot2)
library(adehabitatHR)
#load in data for maps
data(wrld_simpl)
#read in cleaned occurrence data (final csv from MassasaugaDataMerge.R)
comb_data <- read.csv("datainputs/comb_data_28Jun19.csv")
comb_data <- comb_data[,-2]
#read in MX map data
mex <- readOGR("datainputs/mexstates", "mexstates")
#calculate the extent of the map
###After talking w/ WAR and TJH, I added a little extra to the boundaries (were 5,7,5,5)
xrange <- c(min(comb_data[,3]) - 7, max(comb_data[,3]) + 7) # get bounding box
yrange <- c(min(comb_data[,2]) - 5, max(comb_data[,2]) + 7)
#Figure
#par(family = "Arial")
#pdf("figures/OccurrencePoints_18Jul19.pdf", width = 5, height = 8)
map("state", boundary = F, xlim=xrange, ylim=yrange, fill = F)
rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4],col = "light blue")
map("state", boundary = F, xlim=xrange, ylim=yrange, fill = T, col="lightgray", add = T )
suppressWarnings(map(mex, boundary = F, fill = T, col="lightgray", add = TRUE))
map("lakes", add=TRUE, fill=TRUE, col='lightblue', boundary='black')
box()
points(comb_data$Longitude, comb_data$Latitude, col = "red", pch = 1, cex = 0.5)
scalebar(d = 500, xy = c(-95.5, 23.25), type = "line")
points(-95.5, 22.25, col = "red", pch = 1, cex = 0.75)
text(-95.5, 22.25, labels = "Occurrences", pos = 4, cex = 0.75)
#dev.off()
#mapping env data
bioclim <- getData(name = "worldclim", var = "bio", res = 2.5, download = T, path = "datainputs/")
bc_points <- extract(bioclim, data.frame(comb_data$Longitude, comb_data$Latitude))
bc_points <- bc_points[!is.na(bc_points[,1]),]
# bc_cor <- cor(bc_points, use = "pairwise.complete.obs")
# which((bc_cor < 0.4) & (bc_cor > -0.4), arr.ind = T)
##############################
###--- Variable Selection ------
##############################
#here is a principal components analysis to help with variable selection and assess collinearity
bc_pr <- princomp(bc_points, cor = T)
summary(bc_pr)
biplot(bc_pr)
biplot(bc_pr, choices = c(3,4))
biplot(bc_pr, choices = c(5,6))
#look at the loadings
#bc_pr$loadings
#maps, we think this is the most biologically relevant
cor(bc_points[,c(3,19,5,8)], bc_points[,c(3,19,5,8)])#, method = "spearman") #max cor = 0.302 (5&8)
#Tried variables (3,19,5,8), (18,19,5,8), and (1,4,12,15)
#Went with variables 3, 19, 5, and 8 after comparing the three for initial model evaluation
#Setting three suites of variables for further model evaluation
#Rasters w/ just the 4 interested variables, limited to the extent determined above
d_ext <- extent(c(xrange, yrange))
bioclim_1 <- bioclim[[c(1,4,12,15)]]
bioclim_2 <- bioclim[[c(18,19,5,8)]]
bioclim_3 <- bioclim[[c(3,19,5,8)]]
bioclim_1 <- crop(bioclim_1, d_ext)
bioclim_2 <- crop(bioclim_2, d_ext)
bioclim_3 <- crop(bioclim_3, d_ext)
#Save this code to print a figure of the climate variables
# #pdf("figures/ClimateRasters2_20190917.pdf", width = 7, height = 10)
# tiff("figures/ClimateRasters2_20190917.tif", width = 6.5, height = 7
#      , units = "in", res = 600)
# par(mfcol = c(2,2), mar = c(3,3,3,5))
# plot(bioclim_reduced_ext[[1]] , main = "Isothermality (%)")
# plot(bioclim_reduced_ext[[2]], main = "Precipitation of \n Coldest Quarter (mm)")
# plot((bioclim_reduced_ext[[3]]/10), main = "Max Temperature of \n Warmest Month (??C)")
# plot((bioclim_reduced_ext[[4]]/10), main = "Mean Temperature of \n Wettest Quarter (??C)")
# dev.off()
##############################
###--- Presence Points for Training and Testing ------
##############################
#Use 'extract' function from the raster package to extract bioclim values
#associated with presence points
presvals_1 <- extract(bioclim_1, comb_data[,3:2])
presvals_2 <- extract(bioclim_2, comb_data[,3:2])
presvals_3 <- extract(bioclim_3, comb_data[,3:2])
##############################
###--- Environmental Filtering ------
##############################
#Adrian's function to sample at different resolutions
#source("scripts/sample.envR.R")
#Varela method here to sample based on environment, load several required packages
source("scripts/envSample.R")
# test <- sample.envR(coords = coords, filters = list(presvals[,1], presvals[,2],
#                                              presvals[,3], presvals[,4]),
#              scale = list(3, 5, 7, 10))
# Run these at 1.5, 0.3, and 0.75 filters, check eval stats and projections
# envS_data2.5_1 <- envSample(comb_data[,3:2], filters = list(bc_pr$scores[,1], bc_pr$scores[,2],
#             bc_pr$scores[,3], bc_pr$scores[,4]), res = list(0.15, 0.15, 0.15, 0.15), do.plot = TRUE)
# envS_data2.5_2 <- envSample(comb_data[,3:2], filters = list(bc_pr$scores[,1], bc_pr$scores[,2],
#            bc_pr$scores[,3], bc_pr$scores[,4]), res = list(0.3, 0.3, 0.3, 0.3), do.plot = TRUE)
# envS_data2.5_3 <- envSample(comb_data[,3:2], filters = list(bc_pr$scores[,1], bc_pr$scores[,2],
#            bc_pr$scores[,3], bc_pr$scores[,4]), res = list(0.75, 0.75, 0.75, 0.75), do.plot = TRUE)
#
# save(envS_data2.5_1, file = "datainputs/envS_data25_1.RData")
# save(envS_data2.5_2, file = "datainputs/envS_data25_2.RData")
# save(envS_data2.5_3, file = "datainputs/envS_data25_3.RData")
load("datainputs/envS_data25_1.RData") #0.15
#load("datainputs/envS_data_1a.RData") #0.2
load("datainputs/envS_data25_2.RData") #0.3
load("datainputs/envS_data25_3.RData") #0.75
envS_data_1 <- envS_data2.5_1
envS_data_2 <- envS_data2.5_2
envS_data_3 <- envS_data2.5_3
#get the coords for the reduced environmental set without na values, we will use bioclim_1 only here for now, if it is a problem we can revisit
presvals_envS_D1 <- extract(bioclim_1, envS_data_1)
coords_envS_D1 <- envS_data_1[!is.na(presvals_envS_D1[,1]),]
presvals_envS_D1 <- presvals_envS_D1[!is.na(presvals_envS_D1[,1]),]
presvals_envS_D2 <- extract(bioclim_1, envS_data_2)
coords_envS_D2 <- envS_data_2[!is.na(presvals_envS_D2[,1]),]
presvals_envS_D2 <- presvals_envS_D2[!is.na(presvals_envS_D2[,1]),]
presvals_envS_D3 <- extract(bioclim_1, envS_data_3)
coords_envS_D3 <- envS_data_3[!is.na(presvals_envS_D3[,1]),]
presvals_envS_D3 <- presvals_envS_D3[!is.na(presvals_envS_D3[,1]),]
##############################
###--- Random and Geographic Folds for Testing ------
##############################
#separate the original data into training (~80%) and testing (~20%) datasets
#kfold
group <- kfold(comb_data[,3:2], 5)
pres_train <- comb_data[,3:2][group != 1, ] #training points to train the model
pres_test <- comb_data[,3:2][group == 1, ] #need presence testing points to evaluate the model
#make a data frame to hold all input data
training <- c(rep("Yes", nrow(pres_train)), rep("No", nrow(pres_test)))
input_data <- cbind(rbind(pres_train, pres_test), "Training" = training, "Presence" = "Yes", "Filter" = "None", "Fold" = "Random")
#separate the environmentally filtered data at 0.15, 0.3, 0.75 into training (~80%) and testing (~20%) datasets
pick_coords <- list(coords_envS_D1, coords_envS_D2, coords_envS_D3)
pick_filter <- list("Env.15", "Env.3", "Env.75")
for(i in 1:3){
colnames(pick_coords[[i]]) <- c("Longitude", "Latitude")
group_envS <- kfold(pick_coords[[i]], 5)
pres_train_envS <- pick_coords[[i]][group_envS != 1, ]
pres_test_envS <- pick_coords[[i]][group_envS == 1, ]
training <- c(rep("Yes", nrow(pres_train_envS)), rep("No", nrow(pres_test_envS)))
#add to all input_data
temp <-cbind(rbind(pres_train_envS, pres_test_envS), "Training" = training, "Presence" = "Yes", "Filter" = pick_filter[[i]], "Fold" = "Random")
input_data <- rbind(input_data, temp)
}
####add biased gfolds
pick_coords <- list(comb_data[,3:2], coords_envS_D1, coords_envS_D2, coords_envS_D3)
pick_filter <- list("None", "Env.15", "Env.3", "Env.75")
pick_fold <- list("West","East","North","South")
for(coords in 1:4){
#gfold line at 20% quantile of the east edge of the distribution
pres_train_g_w <- pick_coords[[coords]][pick_coords[[coords]][,1] < quantile(pick_coords[[coords]][,1], probs = seq(0,1,0.2))[5],]
pres_test_g_e <- pick_coords[[coords]][pick_coords[[coords]][,1] > quantile(pick_coords[[coords]][,1], probs = seq(0,1,0.2))[5],]
training <- c(rep("Yes", nrow(pres_train_g_w)), rep("No", nrow(pres_test_g_e)))
#add to all input_data
temp <-cbind(rbind(pres_train_g_w, pres_test_g_e), "Training" = training, "Presence" = "Yes", "Filter" = pick_filter[[coords]], "Fold" = "East")
colnames(temp)[1:2] <- colnames(input_data)[1:2]
input_data <- rbind(input_data, temp)
#gfold line at 80% quantile at the west edge of the distribution
pres_train_g_e <- pick_coords[[coords]][pick_coords[[coords]][,1] > quantile(pick_coords[[coords]][,1], probs = seq(0,1,0.2))[2],]
pres_test_g_w <- pick_coords[[coords]][pick_coords[[coords]][,1] < quantile(pick_coords[[coords]][,1], probs = seq(0,1,0.2))[2],]
training <- c(rep("Yes", nrow(pres_train_g_e)), rep("No", nrow(pres_test_g_w)))
#add to all input_data
temp <-cbind(rbind(pres_train_g_e, pres_test_g_w), "Training" = training, "Presence" = "Yes", "Filter" = pick_filter[[coords]], "Fold" = "West")
colnames(temp)[1:2] <- colnames(input_data)[1:2]
input_data <- rbind(input_data, temp)
#gfold line at 20% quantile of the north edge of the distribution
pres_train_g_s <- pick_coords[[coords]][pick_coords[[coords]][,2] < quantile(pick_coords[[coords]][,2], probs = seq(0,1,0.2))[5],]
pres_test_g_n <- pick_coords[[coords]][pick_coords[[coords]][,2] > quantile(pick_coords[[coords]][,2], probs = seq(0,1,0.2))[5],]
training <- c(rep("Yes", nrow(pres_train_g_s)), rep("No", nrow(pres_test_g_n)))
#add to all input_data
temp <-cbind(rbind(pres_train_g_s, pres_test_g_n), "Training" = training, "Presence" = "Yes", "Filter" = pick_filter[[coords]], "Fold" = "North")
colnames(temp)[1:2] <- colnames(input_data)[1:2]
input_data <- rbind(input_data, temp)
#gfold line at 80% quantile at the south edge of the distribution
pres_train_g_n <- pick_coords[[coords]][pick_coords[[coords]][,2] > quantile(pick_coords[[coords]][,2], probs = seq(0,1,0.2))[2],]
pres_test_g_s <- pick_coords[[coords]][pick_coords[[coords]][,2] < quantile(pick_coords[[coords]][,2], probs = seq(0,1,0.2))[2],]
training <- c(rep("Yes", nrow(pres_train_g_n)), rep("No", nrow(pres_test_g_s)))
#add to all input_data
temp <-cbind(rbind(pres_train_g_n, pres_test_g_s), "Training" = training, "Presence" = "Yes", "Filter" = pick_filter[[coords]], "Fold" = "South")
colnames(temp)[1:2] <- colnames(input_data)[1:2]
input_data <- rbind(input_data, temp)
}
summary(input_data)
ggplot(input_data, aes(Longitude, Latitude)) +
geom_point(aes(colour = Training), size = 0.5) +
facet_grid(Filter ~ Fold) +
theme(panel.spacing=unit(0, "lines"),
panel.border = element_rect(color = "black", fill = NA, size = 1),
strip.background = element_rect(color = "black", size = 1))
##############################
###--- Background Points ------
##############################
source("scripts/backgroundPts.R")
#######
#plot
#######
plot(backg_extent_buffer_trans, col = "red") #buffered points
points(backg_extent_trans, col = "green") #extent points
points(coords_spdf_trans, col = "blue") #occurrence points
#convert the sampled points from 100k cirlce buffer into a spatial points dataframe
samp1_trans <- spTransform(samp1, CRS("+proj=utm +zone=14 +ellps=GRS80 +datum=NAD83"))
mcp_occ100k <- mcp(samp1_trans)
mcp_occ100k$area
(mcp_occ100k$area - mcp_occ$area) / mcp_occ$area
#convert the sampled points from 200k cirlce buffer into a spatial points dataframe
samp2_trans <- spTransform(samp2, CRS("+proj=utm +zone=14 +ellps=GRS80 +datum=NAD83"))
mcp_occ200k <- mcp(samp2_trans)
mcp_occ200k$area
(mcp_occ200k$area - mcp_occ$area) / mcp_occ$area
#plot circle buffered points
plot(samp2_trans, col = "red") #buffered points
points(samp1_trans, col = "green") #extent points
points(coords_spdf_trans, col = "blue") #occurrence points
#######################################
library(raster)
library(envirem)
library(rgeos)
library(maps)
library(viridis)
install.packages("viridis")
library(viridis)
library(rgdal)
?gdalinfo
??gdalinfo
Sys.which('gdalinfo')
Sys.which('gdal_translate')
getwd()
inputDir <- "/Users/alawing/Desktop/FutureClim/"
outputDir <- "./datainputs/gcm/envirem/"
ls(inputDir)
?ls
list.files(inputDir)
list.files(outputDir)
list.files("./datainputs/gcm/")
list.files("./")
list.files("../")
list.files("../datainputs")
list.files("../datainputs/gcm")
list.files("../datainputs/gcm/envirem")
list.files("../datainputs/gcm/envirem/")
list.files("../datainputs/gcm/")
files <- list.files(inputDir, pattern = '.tif$', full.names = TRUE)
files
future.clims <- list.files(inputDir)
future.clims
inputDir <- paste("/Users/alawing/Desktop/FutureClim/",future.clims[[1]], sep = "")
inputDir
files <- list.files(inputDir, pattern = '.tif$', full.names = TRUE)
files
model.num <- 1
inputDir <- paste("/Users/alawing/Desktop/FutureClim/",future.clims[[model.num]], sep = "")
files <- list.files(inputDir, pattern = '.tif$', full.names = TRUE)
files
class(envirem_c)
##############################
##------- Input Data -------
##############################
source("scripts/01_input.R")
##############################
##------- Input Data -------
##############################
source("01_input.R")
class(envirem_c)
class(envirem)
data <- read.csv("Table_S2_Revised_FINAL.csv")
data <- read.csv("Table_S2_Revised_FINAL.csv")
